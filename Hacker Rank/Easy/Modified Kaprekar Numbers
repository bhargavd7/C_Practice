/* https://www.hackerrank.com/challenges/kaprekar-numbers/problem */

#include <assert.h>
#include <limits.h>
#include <math.h>
#include <stdbool.h>
#include <stddef.h>
#include <stdint.h>
#include <stdio.h>
#include <stdlib.h>
#include <string.h>

char* readline();

// Complete the kaprekarNumbers function below.
void kaprekarNumbers(int p, int q) {
    int i,j;
    unsigned long long int square = 0;
    char str[24] = {0};
    int len = 0;
    unsigned long long int firstNum = 0;
    int invalidRangeFlag = 0;
    for(i=p;i<=q;i++)
    {
        square = (unsigned long long)i*(unsigned long long)i;
        sprintf(str,"%ld",square);
        len = strlen(str);
        if(len%2 == 0)
        {
            len /= 2;
        }
        else
        {
            len /= 2;
            len++;
        }
        j=0;
        while(len != 0)
        {
            firstNum += pow(10,j)*(square%10);
            square /= 10;
            j++;
            len--;
        }
        
        if(firstNum+square == i)
        {
            printf("%d ",i);
            if(invalidRangeFlag == 0)
            {
                invalidRangeFlag = 1;
            }
        }
        firstNum = 0;
        square = 0;
        memset(&str[0],0,24);
        len = 0;
    }
    if(invalidRangeFlag == 0)
    {
        printf("INVALID RANGE");
    }
}

int main()
{
    char* p_endptr;
    char* p_str = readline();
    int p = strtol(p_str, &p_endptr, 10);

    if (p_endptr == p_str || *p_endptr != '\0') { exit(EXIT_FAILURE); }

    char* q_endptr;
    char* q_str = readline();
    int q = strtol(q_str, &q_endptr, 10);

    if (q_endptr == q_str || *q_endptr != '\0') { exit(EXIT_FAILURE); }

    kaprekarNumbers(p, q);

    return 0;
}

char* readline() {
    size_t alloc_length = 1024;
    size_t data_length = 0;
    char* data = malloc(alloc_length);

    while (true) {
        char* cursor = data + data_length;
        char* line = fgets(cursor, alloc_length - data_length, stdin);

        if (!line) {
            break;
        }

        data_length += strlen(cursor);

        if (data_length < alloc_length - 1 || data[data_length - 1] == '\n') {
            break;
        }

        alloc_length <<= 1;

        data = realloc(data, alloc_length);

        if (!line) {
            break;
        }
    }

    if (data[data_length - 1] == '\n') {
        data[data_length - 1] = '\0';

        data = realloc(data, data_length);
    } else {
        data = realloc(data, data_length + 1);

        data[data_length] = '\0';
    }

    return data;
}
